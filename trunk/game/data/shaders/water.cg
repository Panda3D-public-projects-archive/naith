//Cg

void vshader(in float4 vtx_position : POSITION,
             in uniform float4 k_time,
             in uniform float4x4 mat_modelproj,
             in uniform float4x4 trans_model_to_world,
             in uniform float4 k_waveInfo,
             in uniform float4 k_param2,
             in uniform float4 k_param3,
             in uniform float4 k_speed,
             in uniform float4 mspos_camera,
             out float4 l_texcoord0 : TEXCOORD0,
             out float4 l_eyeVector: TEXCOORD1,
             out float4 l_bumpCoord01: TEXCOORD2,
             out float4 l_bumpCoord23: TEXCOORD3,
             out float3x3 l_rotmatrix,
             out float4 l_position : POSITION)
{
  float ddx = 0.0, ddy = 0.0;
  float deriv;
  float angle;

  float2 position = mul(trans_model_to_world, vtx_position).xy;

  angle = dot(k_speed.xy, position) * k_waveInfo.x + k_time.x * 0.5;
  vtx_position.z += k_waveInfo.y * sin(angle);
  deriv = k_waveInfo.x * k_waveInfo.y * cos(angle);
  ddx = deriv * k_speed.x;
  ddy = deriv * k_speed.y;
  
  angle = dot(k_speed.zw, position) * k_waveInfo.x * 2.0 + k_time.x * 1.7;
  vtx_position.z += k_waveInfo.y * 0.5 * sin(angle);
  deriv = k_waveInfo.x * k_waveInfo.y * cos(angle);
  ddx -= deriv * k_speed.z;
  ddy -= deriv * k_speed.w;

  float BumpScale = k_waveInfo.z;
  l_rotmatrix[0].xyz = BumpScale * normalize(float3(1, 0, ddy)); // Binormal
  l_rotmatrix[1].xyz = BumpScale * normalize(float3(0, 1, ddx)); // Tangent
  l_rotmatrix[2].xyz = normalize(float3(ddx, ddy, 1)); // Normal

  float2 bumpSpeed = k_param2.xy;
  float2 textureScale = k_param2.zw;
  // calculate texture coordinates for normal map lookup
  l_bumpCoord01.xy = position*textureScale + k_time.x * bumpSpeed;
  l_bumpCoord01.zw = position*textureScale * 2.0 + k_time.x * bumpSpeed * 4.0;
  l_bumpCoord23.xy = position*textureScale * 4.0 + k_time.x * bumpSpeed * 8.0;
  l_bumpCoord23.zw = position;

  // transform vertex position by combined view projection matrix
    l_position = mul(mat_modelproj, vtx_position);
  l_eyeVector = vtx_position - mspos_camera;


    float4x4 scaleMatrix = { 0.5f, 0.0f, 0.0f, 0.5f,
                           0.0f, 0.5f, 0.0f, 0.5f,
                                 0.0f, 0.0f, 0.5f, 0.5f,
                                 0.0f, 0.0f, 0.0f, 1.0f };
  l_texcoord0 = mul(mul(scaleMatrix, mat_modelproj), vtx_position);
}

void fshader(
    in float4 l_texcoord0 : TEXCOORD0,
        in uniform sampler2D k_reflection : TEXUNIT0,
    in uniform sampler2D k_normal : TEXUNIT1,
    in float4 l_eyeVector: TEXCOORD1,
    in float4 l_bumpCoord01: TEXCOORD2,
    in float4 l_bumpCoord23: TEXCOORD3,
    in float3x3 l_rotmatrix,
    in uniform float4 k_param3,
    in uniform float4 k_param4,
    in uniform float4 k_deepcolor,
    in uniform float4 k_shallowcolor,
    in uniform float4 k_reflectioncolor,
    out float4 o_color : COLOR)
{
  float4 t0 = tex2D(k_normal, l_bumpCoord01.xy) * 2.0 - 1.0;
  float4 t1 = tex2D(k_normal, l_bumpCoord01.zw) * 2.0 - 1.0;
  float4 t2 = tex2D(k_normal, l_bumpCoord23.xy) * 2.0 - 1.0;
  float3 N = t0.xyz + t1.xyz + t2.xyz;
  
  N = normalize(mul(N, l_rotmatrix));
  float3 E = normalize(l_eyeVector.xyz);
  float facing = 1.0 - max(dot(-E, N), 0);

  // Reflection
  float4 reflection;
  float4 distortion = normalize( tex2D( k_normal, N.xy ) - 0.5f ) * 2.0;
  reflection = tex2Dproj( k_reflection, l_texcoord0 + distortion);

  // Cheap HDR effect
  reflection.rgb *= (reflection.r + reflection.g + reflection.b) * k_param4.z;
  reflection.rgb *= facing;
  float fresnel = saturate(k_param4.y + pow(facing, k_param4.x)) * 0.6;
  o_color = lerp(k_shallowcolor, k_deepcolor, facing) * k_param3.y;
  o_color += lerp(o_color,  reflection * k_reflectioncolor, fresnel) * k_param3.x;
  //o_color.rgb = fresnel;
  o_color.a = 1.0;
}

